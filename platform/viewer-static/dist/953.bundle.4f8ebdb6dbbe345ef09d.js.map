{"version":3,"file":"953.bundle.4f8ebdb6dbbe345ef09d.js","mappings":"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","sources":["file:////Users/HemantP/Documents/RapidAI/Development/rapid-dicom-viewer/extensions/cornerstone-dicom-sr/src/viewports/OHIFCornerstoneSRViewport.tsx"],"sourcesContent":["import React, { useCallback, useContext, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport OHIF, { utils } from '@ohif/core';\nimport { useTranslation } from 'react-i18next';\nimport { setTrackingUniqueIdentifiersForElement } from '../tools/modules/dicomSRModule';\n\nimport {\n  Notification,\n  ViewportActionBar,\n  useViewportGrid,\n  useViewportDialog,\n  Tooltip,\n  Icon,\n} from '@ohif/ui';\nimport classNames from 'classnames';\n\nconst { formatDate } = utils;\n\nconst MEASUREMENT_TRACKING_EXTENSION_ID =\n  '@ohif/extension-measurement-tracking';\n\nconst SR_TOOLGROUP_BASE_NAME = 'SRToolGroup';\n\nfunction OHIFCornerstoneSRViewport(props) {\n  const {\n    children,\n    dataSource,\n    displaySets,\n    viewportIndex,\n    viewportLabel,\n    servicesManager,\n    extensionManager,\n  } = props;\n\n  const { t } = useTranslation('SRViewport');\n\n  const {\n    DisplaySetService,\n    CornerstoneViewportService,\n  } = servicesManager.services;\n\n  // SR viewport will always have a single display set\n  if (displaySets.length > 1) {\n    throw new Error('SR viewport should only have a single display set');\n  }\n\n  const srDisplaySet = displaySets[0];\n\n  const [viewportGrid, viewportGridService] = useViewportGrid();\n  const [viewportDialogState, viewportDialogApi] = useViewportDialog();\n  const [measurementSelected, setMeasurementSelected] = useState(0);\n  const [measurementCount, setMeasurementCount] = useState(1);\n  const [activeImageDisplaySetData, setActiveImageDisplaySetData] = useState(\n    null\n  );\n  const [\n    referencedDisplaySetMetadata,\n    setReferencedDisplaySetMetadata,\n  ] = useState(null);\n  const [isHydrated, setIsHydrated] = useState(srDisplaySet.isHydrated);\n  const [element, setElement] = useState(null);\n  const { viewports, activeViewportIndex } = viewportGrid;\n\n  // Optional hook into tracking extension, if present.\n  let trackedMeasurements;\n  let sendTrackedMeasurementsEvent;\n\n  const hasMeasurementTrackingExtension = extensionManager.registeredExtensionIds.includes(\n    MEASUREMENT_TRACKING_EXTENSION_ID\n  );\n\n  // TODO: this is a hook that fails if we register/de-register\n  if (hasMeasurementTrackingExtension) {\n    const contextModule = extensionManager.getModuleEntry(\n      '@ohif/extension-measurement-tracking.contextModule.TrackedMeasurementsContext'\n    );\n\n    const useTrackedMeasurements = () => useContext(contextModule.context);\n\n    [\n      trackedMeasurements,\n      sendTrackedMeasurementsEvent,\n    ] = useTrackedMeasurements();\n  }\n\n  /**\n   * Store the tracking identifiers per viewport in order to be able to\n   * show the SR measurements on the referenced image on the correct viewport,\n   * when multiple viewports are used.\n   */\n  const setTrackingIdentifiers = useCallback(\n    measurementSelected => {\n      const { measurements } = srDisplaySet;\n\n      setTrackingUniqueIdentifiersForElement(\n        element,\n        measurements.map(measurement => measurement.TrackingUniqueIdentifier),\n        measurementSelected\n      );\n    },\n    [element, measurementSelected, srDisplaySet]\n  );\n\n  /**\n   * OnElementEnabled callback which is called after the cornerstoneExtension\n   * has enabled the element. Note: we delegate all the image rendering to\n   * cornerstoneExtension, so we don't need to do anything here regarding\n   * the image rendering, element enabling etc.\n   */\n  const onElementEnabled = evt => {\n    setElement(evt.detail.element);\n  };\n\n  const updateViewport = useCallback(\n    newMeasurementSelected => {\n      const {\n        StudyInstanceUID,\n        displaySetInstanceUID,\n        sopClassUids,\n      } = srDisplaySet;\n\n      if (!StudyInstanceUID || !displaySetInstanceUID) {\n        return;\n      }\n\n      if (sopClassUids && sopClassUids.length > 1) {\n        // Todo: what happens if there are multiple SOP Classes? Why we are\n        // not throwing an error?\n        console.warn(\n          'More than one SOPClassUID in the same series is not yet supported.'\n        );\n      }\n\n      _getViewportReferencedDisplaySetData(\n        srDisplaySet,\n        newMeasurementSelected,\n        DisplaySetService\n      ).then(({ referencedDisplaySet, referencedDisplaySetMetadata }) => {\n        setMeasurementSelected(newMeasurementSelected);\n        setActiveImageDisplaySetData(referencedDisplaySet);\n        setReferencedDisplaySetMetadata(referencedDisplaySetMetadata);\n\n        if (\n          referencedDisplaySet.displaySetInstanceUID ===\n          activeImageDisplaySetData?.displaySetInstanceUID\n        ) {\n          const { measurements } = srDisplaySet;\n\n          // it means that we have a new referenced display set, and the\n          // imageIdIndex will handle it by updating the viewport, but if they\n          // are the same we just need to use MeasurementService to jump to the\n          // new measurement\n          const viewportInfo = CornerstoneViewportService.getViewportInfoByIndex(\n            viewportIndex\n          );\n\n          const csViewport = CornerstoneViewportService.getCornerstoneViewport(\n            viewportInfo.getViewportId()\n          );\n\n          const imageIds = csViewport.getImageIds();\n\n          const imageIdIndex = imageIds.indexOf(\n            measurements[newMeasurementSelected].imageId\n          );\n\n          if (imageIdIndex !== -1) {\n            csViewport.setImageIdIndex(imageIdIndex);\n          }\n        }\n      });\n    },\n    [dataSource, srDisplaySet, activeImageDisplaySetData, viewportIndex]\n  );\n\n  const getCornerstoneViewport = useCallback(() => {\n    if (!activeImageDisplaySetData) {\n      return null;\n    }\n\n    const { component: Component } = extensionManager.getModuleEntry(\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\n    );\n\n    const { measurements } = srDisplaySet;\n    const measurement = measurements[measurementSelected];\n\n    if (!measurement) {\n      return null;\n    }\n\n    const initialImageIndex = activeImageDisplaySetData.images.findIndex(\n      image => image.imageId === measurement.imageId\n    );\n\n    return (\n      <Component\n        {...props}\n        // should be passed second since we don't want SR displaySet to\n        // override the activeImageDisplaySetData\n        displaySets={[activeImageDisplaySetData]}\n        viewportOptions={{\n          toolGroupId: `${SR_TOOLGROUP_BASE_NAME}`,\n        }}\n        onElementEnabled={onElementEnabled}\n        initialImageIndex={initialImageIndex}\n      ></Component>\n    );\n  }, [activeImageDisplaySetData, viewportIndex, measurementSelected]);\n\n  const onMeasurementChange = useCallback(\n    direction => {\n      let newMeasurementSelected = measurementSelected;\n\n      if (direction === 'right') {\n        newMeasurementSelected++;\n\n        if (newMeasurementSelected >= measurementCount) {\n          newMeasurementSelected = 0;\n        }\n      } else {\n        newMeasurementSelected--;\n\n        if (newMeasurementSelected < 0) {\n          newMeasurementSelected = measurementCount - 1;\n        }\n      }\n\n      setTrackingIdentifiers(newMeasurementSelected);\n      updateViewport(newMeasurementSelected);\n    },\n    [\n      measurementSelected,\n      measurementCount,\n      updateViewport,\n      setTrackingIdentifiers,\n    ]\n  );\n\n  /**\n   Cleanup the SR viewport when the viewport is destroyed\n   */\n  useEffect(() => {\n    const onDisplaySetsRemovedSubscription = DisplaySetService.subscribe(\n      DisplaySetService.EVENTS.DISPLAY_SETS_REMOVED,\n      ({ displaySetInstanceUIDs }) => {\n        const activeViewport = viewports[activeViewportIndex];\n        if (\n          displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)\n        ) {\n          viewportGridService.setDisplaySetsForViewport({\n            viewportIndex: activeViewportIndex,\n            displaySetInstanceUIDs: [],\n          });\n        }\n      }\n    );\n\n    return () => {\n      onDisplaySetsRemovedSubscription.unsubscribe();\n    };\n  }, []);\n\n  /**\n   * Loading the measurements from the SR viewport, which goes through the\n   * isHydratable check, the outcome for the isHydrated state here is always FALSE\n   * since we don't do the hydration here. Todo: can't we just set it as false? why\n   * we are changing the state here? isHydrated is always false at this stage, and\n   * if it is hydrated we don't event use the SR viewport.\n   */\n  useEffect(() => {\n    if (!srDisplaySet.isLoaded) {\n      srDisplaySet.load();\n    }\n    setIsHydrated(srDisplaySet.isHydrated);\n\n    const numMeasurements = srDisplaySet.measurements.length;\n    setMeasurementCount(numMeasurements);\n  }, [srDisplaySet]);\n\n  /**\n   * Hook to update the tracking identifiers when the selected measurement changes or\n   * the element changes\n   */\n  useEffect(() => {\n    if (!element || !srDisplaySet.isLoaded) {\n      return;\n    }\n    setTrackingIdentifiers(measurementSelected);\n  }, [measurementSelected, element, setTrackingIdentifiers, srDisplaySet]);\n\n  /**\n   * Todo: what is this, not sure what it does regarding the react aspect,\n   * it is updating a local variable? which is not state.\n   */\n  let isLocked = trackedMeasurements?.context?.trackedSeries?.length > 0;\n  useEffect(() => {\n    isLocked = trackedMeasurements?.context?.trackedSeries?.length > 0;\n  }, [trackedMeasurements]);\n\n  /**\n   * Data fetching for the SR displaySet, which updates the measurements and\n   * also gets the referenced image displaySet that SR is based on.\n   */\n  useEffect(() => {\n    updateViewport(measurementSelected);\n  }, [dataSource, srDisplaySet]);\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  let childrenWithProps = null;\n\n  if (!activeImageDisplaySetData || !referencedDisplaySetMetadata) {\n    return null;\n  }\n\n  if (children && children.length) {\n    childrenWithProps = children.map((child, index) => {\n      return (\n        child &&\n        React.cloneElement(child, {\n          viewportIndex,\n          key: index,\n        })\n      );\n    });\n  }\n\n  const {\n    PatientID,\n    PatientName,\n    PatientSex,\n    PatientAge,\n    SliceThickness,\n    ManufacturerModelName,\n    StudyDate,\n    SeriesDescription,\n    SpacingBetweenSlices,\n    SeriesNumber,\n  } = referencedDisplaySetMetadata;\n\n  // TODO -> disabled double click for now: onDoubleClick={_onDoubleClick}\n  return (\n    <>\n      <ViewportActionBar\n        onDoubleClick={evt => {\n          evt.stopPropagation();\n          evt.preventDefault();\n        }}\n        onArrowsClick={onMeasurementChange}\n        getStatusComponent={() =>\n          _getStatusComponent({\n            srDisplaySet,\n            viewportIndex,\n            isTracked: false,\n            isRehydratable: srDisplaySet.isRehydratable,\n            isLocked,\n            sendTrackedMeasurementsEvent,\n          })\n        }\n        studyData={{\n          label: viewportLabel,\n          useAltStyling: true,\n          studyDate: formatDate(StudyDate),\n          currentSeries: SeriesNumber,\n          seriesDescription: SeriesDescription,\n          patientInformation: {\n            patientName: PatientName\n              ? OHIF.utils.formatPN(PatientName.Alphabetic)\n              : '',\n            patientSex: PatientSex || '',\n            patientAge: PatientAge || '',\n            MRN: PatientID || '',\n            thickness: SliceThickness ? `${SliceThickness.toFixed(2)}mm` : '',\n            spacing:\n              SpacingBetweenSlices !== undefined\n                ? `${SpacingBetweenSlices.toFixed(2)}mm`\n                : '',\n            scanner: ManufacturerModelName || '',\n          },\n        }}\n      />\n\n      <div className=\"relative flex flex-row w-full h-full overflow-hidden\">\n        {getCornerstoneViewport()}\n        <div className=\"absolute w-full\">\n          {viewportDialogState.viewportIndex === viewportIndex && (\n            <Notification\n              message={viewportDialogState.message}\n              type={viewportDialogState.type}\n              actions={viewportDialogState.actions}\n              onSubmit={viewportDialogState.onSubmit}\n              onOutsideClick={viewportDialogState.onOutsideClick}\n            />\n          )}\n        </div>\n        {childrenWithProps}\n      </div>\n    </>\n  );\n}\n\nOHIFCornerstoneSRViewport.propTypes = {\n  displaySets: PropTypes.arrayOf(PropTypes.object),\n  viewportIndex: PropTypes.number.isRequired,\n  dataSource: PropTypes.object,\n  children: PropTypes.node,\n  customProps: PropTypes.object,\n};\n\nOHIFCornerstoneSRViewport.defaultProps = {\n  customProps: {},\n};\n\nasync function _getViewportReferencedDisplaySetData(\n  displaySet,\n  measurementSelected,\n  DisplaySetService\n) {\n  const { measurements } = displaySet;\n  const measurement = measurements[measurementSelected];\n\n  const { displaySetInstanceUID } = measurement;\n\n  const referencedDisplaySet = DisplaySetService.getDisplaySetByUID(\n    displaySetInstanceUID\n  );\n\n  const image0 = referencedDisplaySet.images[0];\n  const referencedDisplaySetMetadata = {\n    PatientID: image0.PatientID,\n    PatientName: image0.PatientName,\n    PatientSex: image0.PatientSex,\n    PatientAge: image0.PatientAge,\n    SliceThickness: image0.SliceThickness,\n    StudyDate: image0.StudyDate,\n    SeriesDescription: image0.SeriesDescription,\n    SeriesInstanceUID: image0.SeriesInstanceUID,\n    SeriesNumber: image0.SeriesNumber,\n    ManufacturerModelName: image0.ManufacturerModelName,\n    SpacingBetweenSlices: image0.SpacingBetweenSlices,\n  };\n\n  return { referencedDisplaySetMetadata, referencedDisplaySet };\n}\n\nfunction _getStatusComponent({\n  srDisplaySet,\n  viewportIndex,\n  isRehydratable,\n  isLocked,\n  sendTrackedMeasurementsEvent,\n}) {\n  const onPillClick = () => {\n    sendTrackedMeasurementsEvent('RESTORE_PROMPT_HYDRATE_SR', {\n      displaySetInstanceUID: srDisplaySet.displaySetInstanceUID,\n      viewportIndex,\n    });\n  };\n\n  // 1 - Incompatible\n  // 2 - Locked\n  // 3 - Rehydratable / Open\n  const state =\n    isRehydratable && !isLocked ? 3 : isRehydratable && isLocked ? 2 : 1;\n  let ToolTipMessage = null;\n  let StatusIcon = null;\n\n  switch (state) {\n    case 1:\n      StatusIcon = () => (\n        <div\n          className=\"flex items-center justify-center -mr-1 rounded-full\"\n          style={{\n            width: '18px',\n            height: '18px',\n            backgroundColor: '#98e5c1',\n            border: 'solid 1.5px #000000',\n          }}\n        >\n          <Icon\n            name=\"exclamation\"\n            style={{ color: '#000', width: '12px', height: '12px' }}\n          />\n        </div>\n      );\n\n      ToolTipMessage = () => (\n        <div>\n          This structured report is not compatible\n          <br />\n          with this application.\n        </div>\n      );\n      break;\n    case 2:\n      StatusIcon = () => (\n        <div\n          className=\"flex items-center justify-center -mr-1 bg-black rounded-full\"\n          style={{\n            width: '18px',\n            height: '18px',\n          }}\n        >\n          <Icon\n            name=\"lock\"\n            style={{ color: '#05D97C', width: '8px', height: '11px' }}\n          />\n        </div>\n      );\n\n      ToolTipMessage = () => (\n        <div>\n          This structured report is currently read-only\n          <br />\n          because you are tracking measurements in\n          <br />\n          another viewport.\n        </div>\n      );\n      break;\n    case 3:\n      StatusIcon = () => (\n        <div\n          className=\"flex items-center justify-center -mr-1 bg-white rounded-full group-hover:bg-customblue-200\"\n          style={{\n            width: '18px',\n            height: '18px',\n            border: 'solid 1.5px #000000',\n          }}\n        >\n          <Icon\n            name=\"arrow-left\"\n            style={{ color: '#000', width: '14px', height: '14px' }}\n          />\n        </div>\n      );\n\n      ToolTipMessage = () => <div>Click to restore measurements.</div>;\n  }\n\n  const StatusPill = () => (\n    <div\n      className={classNames(\n        'group relative flex items-center justify-center px-2 rounded-full cursor-default bg-customgreen-100',\n        {\n          'hover:bg-customblue-100': state === 3,\n          'cursor-pointer': state === 3,\n        }\n      )}\n      style={{\n        height: '24px',\n        width: '55px',\n      }}\n      onClick={() => {\n        if (state === 3) {\n          if (onPillClick) {\n            onPillClick();\n          }\n        }\n      }}\n    >\n      <span className=\"pr-1 text-lg font-bold leading-none text-black\">SR</span>\n      <StatusIcon />\n    </div>\n  );\n\n  return (\n    <>\n      {ToolTipMessage && (\n        <Tooltip content={<ToolTipMessage />} position=\"bottom-left\">\n          <StatusPill />\n        </Tooltip>\n      )}\n      {!ToolTipMessage && <StatusPill />}\n    </>\n  );\n}\n\n// function _onDoubleClick() {\n//   const cancelActiveManipulatorsForElement = cornerstoneTools.getModule(\n//     'manipulatorState'\n//   ).setters.cancelActiveManipulatorsForElement;\n//   const enabledElements = cornerstoneTools.store.state.enabledElements;\n//   enabledElements.forEach(element => {\n//     cancelActiveManipulatorsForElement(element);\n//   });\n// }\n\nexport default OHIFCornerstoneSRViewport;\n"],"names":["i","formatDate","utils","OHIFCornerstoneSRViewport","props","children","dataSource","displaySets","viewportIndex","viewportLabel","servicesManager","extensionManager","useTranslation","t","services","DisplaySetService","CornerstoneViewportService","length","Error","trackedMeasurements","sendTrackedMeasurementsEvent","srDisplaySet","useViewportGrid","viewportGrid","viewportGridService","useViewportDialog","viewportDialogState","useState","measurementSelected","setMeasurementSelected","measurementCount","setMeasurementCount","activeImageDisplaySetData","setActiveImageDisplaySetData","referencedDisplaySetMetadata","setReferencedDisplaySetMetadata","isHydrated","setIsHydrated","element","setElement","viewports","activeViewportIndex","registeredExtensionIds","includes","contextModule","getModuleEntry","useContext","context","setTrackingIdentifiers","useCallback","measurements","setTrackingUniqueIdentifiersForElement","map","measurement","TrackingUniqueIdentifier","onElementEnabled","evt","detail","updateViewport","newMeasurementSelected","StudyInstanceUID","displaySetInstanceUID","sopClassUids","console","warn","_getViewportReferencedDisplaySetData","then","referencedDisplaySet","viewportInfo","getViewportInfoByIndex","csViewport","getCornerstoneViewport","getViewportId","imageIdIndex","getImageIds","indexOf","imageId","setImageIdIndex","Component","component","initialImageIndex","images","findIndex","image","viewportOptions","toolGroupId","onMeasurementChange","direction","useEffect","onDisplaySetsRemovedSubscription","subscribe","EVENTS","DISPLAY_SETS_REMOVED","displaySetInstanceUIDs","activeViewport","setDisplaySetsForViewport","unsubscribe","isLoaded","load","numMeasurements","isLocked","trackedSeries","childrenWithProps","child","index","React","key","PatientID","PatientName","PatientSex","PatientAge","SliceThickness","ManufacturerModelName","StudyDate","SeriesDescription","SpacingBetweenSlices","SeriesNumber","onDoubleClick","stopPropagation","preventDefault","onArrowsClick","getStatusComponent","isRehydratable","onPillClick","state","ToolTipMessage","StatusIcon","className","style","width","height","backgroundColor","border","name","color","StatusPill","classNames","onClick","content","position","_getStatusComponent","isTracked","studyData","label","useAltStyling","studyDate","currentSeries","seriesDescription","patientInformation","patientName","OHIF","Alphabetic","patientSex","patientAge","MRN","thickness","toFixed","spacing","undefined","scanner","message","type","actions","onSubmit","onOutsideClick","displaySet","getDisplaySetByUID","image0","SeriesInstanceUID","propTypes","PropTypes","customProps","defaultProps"],"sourceRoot":""}