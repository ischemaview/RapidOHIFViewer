{"version":3,"file":"569.bundle.5c809f7a1b9a80e0a01e.js","mappings":"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","sources":["file:////Users/HemantP/Documents/RapidAI/Development/rapid-dicom-viewer/extensions/cornerstone-dicom-seg/src/utils/initSEGToolGroup.ts","file:////Users/HemantP/Documents/RapidAI/Development/rapid-dicom-viewer/extensions/cornerstone-dicom-seg/src/utils/_hydrateSEG.ts","file:////Users/HemantP/Documents/RapidAI/Development/rapid-dicom-viewer/extensions/cornerstone-dicom-seg/src/utils/promptHydrateSEG.ts","file:////Users/HemantP/Documents/RapidAI/Development/rapid-dicom-viewer/extensions/cornerstone-dicom-seg/src/viewports/OHIFCornerstoneSEGViewport.tsx","file:////Users/HemantP/Documents/RapidAI/Development/rapid-dicom-viewer/extensions/cornerstone-dicom-seg/src/viewports/_getStatusComponent.tsx"],"sourcesContent":["function createSEGToolGroupAndAddTools(\n  ToolGroupService,\n  toolGroupId,\n  extensionManager\n) {\n  const utilityModule = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone.utilityModule.tools'\n  );\n\n  const { toolNames, Enums } = utilityModule.exports;\n\n  const tools = {\n    active: [\n      {\n        toolName: toolNames.WindowLevel,\n        bindings: [{ mouseButton: Enums.MouseBindings.Primary }],\n      },\n      {\n        toolName: toolNames.Pan,\n        bindings: [{ mouseButton: Enums.MouseBindings.Auxiliary }],\n      },\n      {\n        toolName: toolNames.Zoom,\n        bindings: [{ mouseButton: Enums.MouseBindings.Secondary }],\n      },\n      { toolName: toolNames.StackScrollMouseWheel, bindings: [] },\n    ],\n    enabled: [{ toolName: toolNames.SegmentationDisplay }],\n  };\n\n  return ToolGroupService.createToolGroupAndAddTools(toolGroupId, tools, {});\n}\n\nexport default createSEGToolGroupAndAddTools;\n","async function _hydrateSEGDisplaySet({\n  segDisplaySet,\n  viewportIndex,\n  toolGroupId,\n  servicesManager,\n}) {\n  const {\n    SegmentationService,\n    HangingProtocolService,\n    ViewportGridService,\n  } = servicesManager.services;\n\n  const displaySetInstanceUID = segDisplaySet.referencedDisplaySetInstanceUID;\n\n  let segmentationId = null;\n\n  // We need the hydration to notify panels about the new segmentation added\n  const suppressEvents = false;\n\n  segmentationId = await SegmentationService.createSegmentationForSEGDisplaySet(\n    segDisplaySet,\n    segmentationId,\n    suppressEvents\n  );\n\n  SegmentationService.hydrateSegmentation(segDisplaySet.displaySetInstanceUID);\n\n  const { viewports } = ViewportGridService.getState();\n\n  const updatedViewports = HangingProtocolService.getViewportsRequireUpdate(\n    viewportIndex,\n    displaySetInstanceUID\n  );\n\n  ViewportGridService.setDisplaySetsForViewports(updatedViewports);\n\n  // Todo: fix this after we have a better way for stack viewport segmentations\n\n  // check every viewport in the viewports to see if the displaySetInstanceUID\n  // is being displayed, if so we need to update the viewport to use volume viewport\n  // (if already is not using it) since Cornerstone3D currently only supports\n  // volume viewport for segmentation\n  viewports.forEach((viewport, index) => {\n    if (index === viewportIndex) {\n      return;\n    }\n\n    const shouldDisplaySeg = SegmentationService.shouldRenderSegmentation(\n      viewport.displaySetInstanceUIDs,\n      segDisplaySet.displaySetInstanceUID\n    );\n\n    if (shouldDisplaySeg) {\n      ViewportGridService.setDisplaySetsForViewport({\n        viewportIndex: index,\n        displaySetInstanceUIDs: viewport.displaySetInstanceUIDs,\n        viewportOptions: {\n          viewportType: 'volume',\n          toolGroupId,\n          initialImageOptions: {\n            preset: 'middle',\n          },\n        },\n      });\n    }\n  });\n\n  return true;\n}\n\nexport default _hydrateSEGDisplaySet;\n","import hydrateSEGDisplaySet from './_hydrateSEG';\n\nconst RESPONSE = {\n  NO_NEVER: -1,\n  CANCEL: 0,\n  HYDRATE_SEG: 5,\n};\n\nfunction promptHydrateSEG({\n  servicesManager,\n  segDisplaySet,\n  viewportIndex,\n  toolGroupId = 'default',\n}) {\n  const { UIViewportDialogService } = servicesManager.services;\n\n  return new Promise(async function(resolve, reject) {\n    const promptResult = await _askHydrate(\n      UIViewportDialogService,\n      viewportIndex\n    );\n\n    if (promptResult === RESPONSE.HYDRATE_SEG) {\n      const isHydrated = await hydrateSEGDisplaySet({\n        segDisplaySet,\n        viewportIndex,\n        toolGroupId,\n        servicesManager,\n      });\n\n      resolve(isHydrated);\n    }\n  });\n}\n\nfunction _askHydrate(UIViewportDialogService, viewportIndex) {\n  return new Promise(function(resolve, reject) {\n    const message = 'Do you want to open this Segmentation?';\n    const actions = [\n      {\n        type: 'secondary',\n        text: 'No',\n        value: RESPONSE.CANCEL,\n      },\n      {\n        type: 'primary',\n        text: 'Yes',\n        value: RESPONSE.HYDRATE_SEG,\n      },\n    ];\n    const onSubmit = result => {\n      UIViewportDialogService.hide();\n      resolve(result);\n    };\n\n    UIViewportDialogService.show({\n      viewportIndex,\n      type: 'info',\n      message,\n      actions,\n      onSubmit,\n      onOutsideClick: () => {\n        UIViewportDialogService.hide();\n        resolve(RESPONSE.CANCEL);\n      },\n    });\n  });\n}\n\nexport default promptHydrateSEG;\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport OHIF, { utils } from '@ohif/core';\nimport {\n  Notification,\n  ViewportActionBar,\n  useViewportGrid,\n  useViewportDialog,\n  LoadingIndicatorProgress,\n} from '@ohif/ui';\n\nimport { useTranslation } from 'react-i18next';\n\nimport createSEGToolGroupAndAddTools from '../utils/initSEGToolGroup';\nimport _hydrateSEGDisplaySet from '../utils/_hydrateSEG';\nimport promptHydrateSEG from '../utils/promptHydrateSEG';\nimport _getStatusComponent from './_getStatusComponent';\n\nconst { formatDate } = utils;\nconst SEG_TOOLGROUP_BASE_NAME = 'SEGToolGroup';\n\nfunction OHIFCornerstoneSEGViewport(props) {\n  const {\n    children,\n    displaySets,\n    viewportOptions,\n    viewportIndex,\n    viewportLabel,\n    servicesManager,\n    extensionManager,\n  } = props;\n\n  const { t } = useTranslation('SEGViewport');\n\n  const {\n    DisplaySetService,\n    ToolGroupService,\n    SegmentationService,\n  } = servicesManager.services;\n\n  const toolGroupId = `${SEG_TOOLGROUP_BASE_NAME}-${viewportIndex}`;\n\n  // SEG viewport will always have a single display set\n  if (displaySets.length > 1) {\n    throw new Error('SEG viewport should only have a single display set');\n  }\n\n  const segDisplaySet = displaySets[0];\n\n  const [viewportGrid, viewportGridService] = useViewportGrid();\n  const [viewportDialogState, viewportDialogApi] = useViewportDialog();\n\n  // States\n  const [isToolGroupCreated, setToolGroupCreated] = useState(false);\n  const [selectedSegment, setSelectedSegment] = useState(1);\n\n  // Hydration means that the SEG is opened and segments are loaded into the\n  // segmentation panel, and SEG is also rendered on any viewport that is in the\n  // same frameOfReferenceUID as the referencedSeriesUID of the SEG. However,\n  // loading basically means SEG loading over network and bit unpacking of the\n  // SEG data.\n  const [isHydrated, setIsHydrated] = useState(segDisplaySet.isHydrated);\n  const [segIsLoading, setSegIsLoading] = useState(!segDisplaySet.isLoaded);\n  const [element, setElement] = useState(null);\n  const [processingProgress, setProcessingProgress] = useState({\n    segmentIndex: 1,\n    totalSegments: null,\n  });\n\n  // refs\n  const referencedDisplaySetRef = useRef(null);\n\n  const { viewports, activeViewportIndex } = viewportGrid;\n\n  const referencedDisplaySet = segDisplaySet.getReferenceDisplaySet();\n  const referencedDisplaySetMetadata = _getReferencedDisplaySetMetadata(\n    referencedDisplaySet\n  );\n\n  referencedDisplaySetRef.current = {\n    displaySet: referencedDisplaySet,\n    metadata: referencedDisplaySetMetadata,\n  };\n  /**\n   * OnElementEnabled callback which is called after the cornerstoneExtension\n   * has enabled the element. Note: we delegate all the image rendering to\n   * cornerstoneExtension, so we don't need to do anything here regarding\n   * the image rendering, element enabling etc.\n   */\n  const onElementEnabled = evt => {\n    setElement(evt.detail.element);\n  };\n\n  const onElementDisabled = () => {\n    setElement(null);\n  };\n\n  const getCornerstoneViewport = useCallback(() => {\n    const { component: Component } = extensionManager.getModuleEntry(\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\n    );\n\n    const {\n      displaySet: referencedDisplaySet,\n    } = referencedDisplaySetRef.current;\n\n    // Todo: jump to the center of the first segment\n\n    return (\n      <Component\n        {...props}\n        displaySets={[referencedDisplaySet, segDisplaySet]}\n        viewportOptions={{\n          viewportType: 'volume',\n          toolGroupId: toolGroupId,\n          orientation: viewportOptions.orientation,\n        }}\n        onElementEnabled={onElementEnabled}\n        onElementDisabled={onElementDisabled}\n        // initialImageIndex={initialImageIndex}\n      ></Component>\n    );\n  }, [viewportIndex, segDisplaySet, toolGroupId]);\n\n  const onSegmentChange = useCallback(\n    direction => {\n      direction = direction === 'left' ? -1 : 1;\n      const segmentationId = segDisplaySet.displaySetInstanceUID;\n      const segmentation = SegmentationService.getSegmentation(segmentationId);\n\n      const { segments } = segmentation;\n\n      const numberOfSegments = Object.keys(segments).length;\n\n      let newSelectedSegmentIndex = selectedSegment + direction;\n\n      if (newSelectedSegmentIndex > numberOfSegments - 1) {\n        newSelectedSegmentIndex = 1;\n      } else if (newSelectedSegmentIndex === 0) {\n        newSelectedSegmentIndex = numberOfSegments - 1;\n      }\n\n      SegmentationService.jumpToSegmentCenter(\n        segmentationId,\n        newSelectedSegmentIndex,\n        toolGroupId\n      );\n      setSelectedSegment(newSelectedSegmentIndex);\n    },\n    [selectedSegment]\n  );\n\n  useEffect(() => {\n    if (segIsLoading) {\n      return;\n    }\n\n    promptHydrateSEG({\n      servicesManager,\n      viewportIndex,\n      segDisplaySet,\n    }).then(isHydrated => {\n      if (isHydrated) {\n        setIsHydrated(true);\n      }\n    });\n  }, [servicesManager, viewportIndex, segDisplaySet, segIsLoading]);\n\n  useEffect(() => {\n    const { unsubscribe } = SegmentationService.subscribe(\n      SegmentationService.EVENTS.SEGMENTATION_PIXEL_DATA_CREATED,\n      evt => {\n        if (\n          evt.segDisplaySet.displaySetInstanceUID ===\n          segDisplaySet.displaySetInstanceUID\n        ) {\n          setSegIsLoading(false);\n        }\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [segDisplaySet]);\n\n  useEffect(() => {\n    const { unsubscribe } = SegmentationService.subscribe(\n      SegmentationService.EVENTS.SEGMENT_PIXEL_DATA_CREATED,\n      ({ segmentIndex, numSegments }) => {\n        setProcessingProgress({\n          segmentIndex,\n          totalSegments: numSegments,\n        });\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [segDisplaySet]);\n\n  /**\n   Cleanup the SEG viewport when the viewport is destroyed\n   */\n  useEffect(() => {\n    const onDisplaySetsRemovedSubscription = DisplaySetService.subscribe(\n      DisplaySetService.EVENTS.DISPLAY_SETS_REMOVED,\n      ({ displaySetInstanceUIDs }) => {\n        const activeViewport = viewports[activeViewportIndex];\n        if (\n          displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)\n        ) {\n          viewportGridService.setDisplaySetsForViewport({\n            viewportIndex: activeViewportIndex,\n            displaySetInstanceUIDs: [],\n          });\n        }\n      }\n    );\n\n    return () => {\n      onDisplaySetsRemovedSubscription.unsubscribe();\n    };\n  }, []);\n\n  useEffect(() => {\n    let toolGroup = ToolGroupService.getToolGroup(toolGroupId);\n\n    if (toolGroup) {\n      return;\n    }\n\n    toolGroup = createSEGToolGroupAndAddTools(\n      ToolGroupService,\n      toolGroupId,\n      extensionManager\n    );\n\n    setToolGroupCreated(true);\n\n    return () => {\n      // remove the segmentation representations if seg displayset changed\n      SegmentationService.removeSegmentationRepresentationFromToolGroup(\n        toolGroupId\n      );\n\n      ToolGroupService.destroyToolGroup(toolGroupId);\n    };\n  }, []);\n\n  useEffect(() => {\n    setIsHydrated(segDisplaySet.isHydrated);\n\n    return () => {\n      // remove the segmentation representations if seg displayset changed\n      SegmentationService.removeSegmentationRepresentationFromToolGroup(\n        toolGroupId\n      );\n      referencedDisplaySetRef.current = null;\n    };\n  }, [segDisplaySet]);\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  let childrenWithProps = null;\n\n  if (\n    !referencedDisplaySetRef.current ||\n    referencedDisplaySet.displaySetInstanceUID !==\n      referencedDisplaySetRef.current.displaySet.displaySetInstanceUID\n  ) {\n    return null;\n  }\n\n  if (children && children.length) {\n    childrenWithProps = children.map((child, index) => {\n      return (\n        child &&\n        React.cloneElement(child, {\n          viewportIndex,\n          key: index,\n        })\n      );\n    });\n  }\n\n  const {\n    PatientID,\n    PatientName,\n    PatientSex,\n    PatientAge,\n    SliceThickness,\n    ManufacturerModelName,\n    StudyDate,\n    SeriesDescription,\n    SpacingBetweenSlices,\n    SeriesNumber,\n  } = referencedDisplaySetRef.current.metadata;\n\n  const onPillClick = () => {\n    promptHydrateSEG({\n      servicesManager,\n      viewportIndex,\n      segDisplaySet,\n    }).then(isHydrated => {\n      if (isHydrated) {\n        setIsHydrated(true);\n      }\n    });\n  };\n\n  return (\n    <>\n      <ViewportActionBar\n        onDoubleClick={evt => {\n          evt.stopPropagation();\n          evt.preventDefault();\n        }}\n        onArrowsClick={onSegmentChange}\n        getStatusComponent={() => {\n          return _getStatusComponent({\n            isHydrated,\n            onPillClick,\n          });\n        }}\n        studyData={{\n          label: viewportLabel,\n          useAltStyling: true,\n          studyDate: formatDate(StudyDate),\n          currentSeries: SeriesNumber,\n          seriesDescription: `SEG Viewport ${SeriesDescription}`,\n          patientInformation: {\n            patientName: PatientName\n              ? OHIF.utils.formatPN(PatientName.Alphabetic)\n              : '',\n            patientSex: PatientSex || '',\n            patientAge: PatientAge || '',\n            MRN: PatientID || '',\n            thickness: SliceThickness ? `${SliceThickness.toFixed(2)}mm` : '',\n            spacing:\n              SpacingBetweenSlices !== undefined\n                ? `${SpacingBetweenSlices.toFixed(2)}mm`\n                : '',\n            scanner: ManufacturerModelName || '',\n          },\n        }}\n      />\n\n      <div className=\"relative flex flex-row w-full h-full overflow-hidden\">\n        {segIsLoading && (\n          <LoadingIndicatorProgress\n            className=\"w-full h-full\"\n            progress={\n              processingProgress.totalSegments !== null\n                ? ((processingProgress.segmentIndex + 1) /\n                    processingProgress.totalSegments) *\n                  100\n                : null\n            }\n            textBlock={\n              !processingProgress.totalSegments ? (\n                <span className=\"text-white text-sm\">Loading SEG ...</span>\n              ) : (\n                <span className=\"text-white text-sm flex items-baseline space-x-2\">\n                  <div>Loading Segment</div>\n                  <div className=\"w-3\">{`${processingProgress.segmentIndex}`}</div>\n                  <div>/</div>\n                  <div>{`${processingProgress.totalSegments}`}</div>\n                </span>\n              )\n            }\n          />\n        )}\n        {getCornerstoneViewport()}\n        <div className=\"absolute w-full\">\n          {viewportDialogState.viewportIndex === viewportIndex && (\n            <Notification\n              id=\"viewport-notification\"\n              message={viewportDialogState.message}\n              type={viewportDialogState.type}\n              actions={viewportDialogState.actions}\n              onSubmit={viewportDialogState.onSubmit}\n              onOutsideClick={viewportDialogState.onOutsideClick}\n            />\n          )}\n        </div>\n        {childrenWithProps}\n      </div>\n    </>\n  );\n}\n\nOHIFCornerstoneSEGViewport.propTypes = {\n  displaySets: PropTypes.arrayOf(PropTypes.object),\n  viewportIndex: PropTypes.number.isRequired,\n  dataSource: PropTypes.object,\n  children: PropTypes.node,\n  customProps: PropTypes.object,\n};\n\nOHIFCornerstoneSEGViewport.defaultProps = {\n  customProps: {},\n};\n\nfunction _getReferencedDisplaySetMetadata(referencedDisplaySet) {\n  const image0 = referencedDisplaySet.images[0];\n  const referencedDisplaySetMetadata = {\n    PatientID: image0.PatientID,\n    PatientName: image0.PatientName,\n    PatientSex: image0.PatientSex,\n    PatientAge: image0.PatientAge,\n    SliceThickness: image0.SliceThickness,\n    StudyDate: image0.StudyDate,\n    SeriesDescription: image0.SeriesDescription,\n    SeriesInstanceUID: image0.SeriesInstanceUID,\n    SeriesNumber: image0.SeriesNumber,\n    ManufacturerModelName: image0.ManufacturerModelName,\n    SpacingBetweenSlices: image0.SpacingBetweenSlices,\n  };\n\n  return referencedDisplaySetMetadata;\n}\n\nexport default OHIFCornerstoneSEGViewport;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Icon, Tooltip } from '@ohif/ui';\n\nimport _hydrateSEGDisplaySet from '../utils/_hydrateSEG';\n\nexport default function _getStatusComponent({ isHydrated, onPillClick }) {\n  let ToolTipMessage = null;\n  let StatusIcon = null;\n\n  switch (isHydrated) {\n    case true:\n      StatusIcon = () => (\n        <div\n          className=\"flex items-center justify-center -mr-1 rounded-full\"\n          style={{\n            width: '18px',\n            height: '18px',\n            backgroundColor: '#98e5c1',\n            border: 'solid 1.5px #000000',\n          }}\n        >\n          <Icon\n            name=\"exclamation\"\n            style={{ color: '#000', width: '12px', height: '12px' }}\n          />\n        </div>\n      );\n\n      ToolTipMessage = () => (\n        <div>This Segmentation is loaded in the segmentation panel</div>\n      );\n      break;\n    case false:\n      StatusIcon = () => (\n        <div\n          className=\"flex items-center justify-center -mr-1 bg-white rounded-full group-hover:bg-customblue-200\"\n          style={{\n            width: '18px',\n            height: '18px',\n            border: 'solid 1.5px #000000',\n          }}\n        >\n          <Icon\n            name=\"arrow-left\"\n            style={{ color: '#000', width: '14px', height: '14px' }}\n          />\n        </div>\n      );\n\n      ToolTipMessage = () => <div>Click to load segmentation.</div>;\n  }\n\n  const StatusPill = () => (\n    <div\n      className={classNames(\n        'group relative flex items-center justify-center px-8 rounded-full cursor-default bg-customgreen-100',\n        {\n          'hover:bg-customblue-100': !isHydrated,\n          'cursor-pointer': !isHydrated,\n        }\n      )}\n      style={{\n        height: '24px',\n        width: '55px',\n      }}\n      onClick={() => {\n        if (!isHydrated) {\n          if (onPillClick) {\n            onPillClick();\n          }\n        }\n      }}\n    >\n      <div className=\"pr-1 text-base font-medium leading-none text-black\">\n        SEG\n      </div>\n      <StatusIcon />\n    </div>\n  );\n\n  return (\n    <>\n      {ToolTipMessage && (\n        <Tooltip content={<ToolTipMessage />} position=\"bottom-left\">\n          <StatusPill />\n        </Tooltip>\n      )}\n      {!ToolTipMessage && <StatusPill />}\n    </>\n  );\n}\n"],"names":["ToolGroupService","toolGroupId","extensionManager","getModuleEntry","exports","toolNames","Enums","tools","active","toolName","WindowLevel","bindings","mouseButton","MouseBindings","Primary","Pan","Auxiliary","Zoom","Secondary","StackScrollMouseWheel","enabled","SegmentationDisplay","createToolGroupAndAddTools","segDisplaySet","viewportIndex","servicesManager","services","SegmentationService","HangingProtocolService","ViewportGridService","displaySetInstanceUID","referencedDisplaySetInstanceUID","segmentationId","createSegmentationForSEGDisplaySet","hydrateSegmentation","getState","viewports","updatedViewports","getViewportsRequireUpdate","setDisplaySetsForViewports","forEach","viewport","index","shouldRenderSegmentation","displaySetInstanceUIDs","setDisplaySetsForViewport","viewportOptions","viewportType","initialImageOptions","preset","RESPONSE","_askHydrate","UIViewportDialogService","Promise","resolve","reject","actions","type","text","value","show","message","onSubmit","result","hide","onOutsideClick","hydrateSEGDisplaySet","isHydrated","formatDate","utils","OHIFCornerstoneSEGViewport","props","children","displaySets","viewportLabel","useTranslation","t","DisplaySetService","length","Error","useViewportGrid","viewportGrid","viewportGridService","useViewportDialog","viewportDialogState","useState","setToolGroupCreated","selectedSegment","setSelectedSegment","setIsHydrated","isLoaded","segIsLoading","setSegIsLoading","setElement","segmentIndex","totalSegments","processingProgress","setProcessingProgress","referencedDisplaySetRef","useRef","activeViewportIndex","referencedDisplaySet","getReferenceDisplaySet","referencedDisplaySetMetadata","image0","images","PatientID","PatientName","PatientSex","PatientAge","SliceThickness","StudyDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","ManufacturerModelName","SpacingBetweenSlices","_getReferencedDisplaySetMetadata","current","displaySet","metadata","onElementEnabled","evt","detail","element","onElementDisabled","getCornerstoneViewport","useCallback","Component","component","orientation","onSegmentChange","direction","segments","getSegmentation","numberOfSegments","Object","keys","newSelectedSegmentIndex","jumpToSegmentCenter","useEffect","promptHydrateSEG","then","unsubscribe","subscribe","EVENTS","SEGMENTATION_PIXEL_DATA_CREATED","SEGMENT_PIXEL_DATA_CREATED","numSegments","onDisplaySetsRemovedSubscription","DISPLAY_SETS_REMOVED","activeViewport","includes","toolGroup","getToolGroup","createSEGToolGroupAndAddTools","removeSegmentationRepresentationFromToolGroup","destroyToolGroup","childrenWithProps","map","child","React","key","onPillClick","onDoubleClick","stopPropagation","preventDefault","onArrowsClick","getStatusComponent","ToolTipMessage","StatusIcon","className","style","width","height","backgroundColor","border","name","color","StatusPill","classNames","onClick","content","position","_getStatusComponent","studyData","label","useAltStyling","studyDate","currentSeries","seriesDescription","patientInformation","patientName","OHIF","Alphabetic","patientSex","patientAge","MRN","thickness","toFixed","spacing","undefined","scanner","progress","textBlock","id","propTypes","PropTypes","dataSource","customProps","defaultProps"],"sourceRoot":""}