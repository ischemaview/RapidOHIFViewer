{"version":3,"file":"799.bundle.9db066b9bd06b1313125.js","mappings":"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","sources":["file:////Users/HemantP/Documents/RapidAI/Development/rapid-dicom-viewer/extensions/measurement-tracking/src/viewports/TrackedCornerstoneViewport.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport OHIF, { utils } from '@ohif/core';\n\nimport {\n  Notification,\n  ViewportActionBar,\n  useCine,\n  useViewportGrid,\n  useViewportDialog,\n  Tooltip,\n  Icon,\n} from '@ohif/ui';\n\nimport { useTranslation } from 'react-i18next';\n\nimport { eventTarget, Enums } from '@cornerstonejs/core';\nimport { annotation } from '@cornerstonejs/tools';\nimport { useTrackedMeasurements } from './../getContextModule';\n\nconst { formatDate } = utils;\n\nfunction TrackedCornerstoneViewport(props) {\n  const {\n    children,\n    displaySets,\n    viewportIndex,\n    viewportLabel,\n    servicesManager,\n    extensionManager,\n    commandsManager,\n  } = props;\n\n  const { t } = useTranslation('TrackedViewport');\n\n  const {\n    MeasurementService,\n    CornerstoneViewportService,\n  } = servicesManager.services;\n\n  // Todo: handling more than one displaySet on the same viewport\n  const displaySet = displaySets[0];\n\n  const [trackedMeasurements] = useTrackedMeasurements();\n  const [{ activeViewportIndex }] = useViewportGrid();\n  const [{ isCineEnabled, cines }, cineService] = useCine();\n  const [viewportDialogState] = useViewportDialog();\n  const [isTracked, setIsTracked] = useState(false);\n  const [trackedMeasurementUID, setTrackedMeasurementUID] = useState(null);\n  const [element, setElement] = useState(null);\n\n  const { trackedSeries } = trackedMeasurements.context;\n\n  const viewportId = CornerstoneViewportService.getViewportId(viewportIndex);\n\n  const {\n    Modality,\n    SeriesDate,\n    SeriesDescription,\n    SeriesInstanceUID,\n    SeriesNumber,\n  } = displaySet;\n\n  const {\n    PatientID,\n    PatientName,\n    PatientSex,\n    PatientAge,\n    SliceThickness,\n    SpacingBetweenSlices,\n    ManufacturerModelName,\n  } = displaySet.images[0];\n\n  const cineHandler = () => {\n    if (!cines || !cines[viewportIndex] || !element) {\n      return;\n    }\n\n    const cine = cines[viewportIndex];\n    const isPlaying = cine.isPlaying || false;\n    const frameRate = cine.frameRate || 24;\n\n    const validFrameRate = Math.max(frameRate, 1);\n\n    if (isPlaying) {\n      cineService.playClip(element, {\n        framesPerSecond: validFrameRate,\n      });\n    } else {\n      cineService.stopClip(element);\n    }\n  };\n\n  useEffect(() => {\n    if (isTracked) {\n      annotation.config.style.setViewportToolStyles(viewportId, {\n        global: {\n          lineDash: '',\n        },\n      });\n\n      CornerstoneViewportService.getRenderingEngine().renderViewport(\n        viewportId\n      );\n\n      return;\n    }\n\n    annotation.config.style.setViewportToolStyles(`viewport-${viewportIndex}`, {\n      global: {\n        lineDash: '4,4',\n      },\n    });\n\n    CornerstoneViewportService.getRenderingEngine().renderViewport(viewportId);\n\n    return () => {\n      annotation.config.style.setViewportToolStyles(viewportId, {});\n    };\n  }, [isTracked]);\n\n  // unmount cleanup\n  useEffect(() => {\n    eventTarget.addEventListener(\n      Enums.Events.STACK_VIEWPORT_NEW_STACK,\n      cineHandler\n    );\n\n    return () => {\n      cineService.setCine({ id: viewportIndex, isPlaying: false });\n      eventTarget.removeEventListener(\n        Enums.Events.STACK_VIEWPORT_NEW_STACK,\n        cineHandler\n      );\n    };\n  }, [element]);\n\n  useEffect(() => {\n    if (!cines || !cines[viewportIndex] || !element) {\n      return;\n    }\n\n    cineHandler();\n\n    return () => {\n      if (element && cines?.[viewportIndex]?.isPlaying) {\n        cineService.stopClip(element);\n      }\n    };\n  }, [cines, viewportIndex, cineService, element, cineHandler]);\n\n  if (trackedSeries.includes(SeriesInstanceUID) !== isTracked) {\n    setIsTracked(!isTracked);\n  }\n\n  /**\n   * OnElementEnabled callback which is called after the cornerstoneExtension\n   * has enabled the element. Note: we delegate all the image rendering to\n   * cornerstoneExtension, so we don't need to do anything here regarding\n   * the image rendering, element enabling etc.\n   */\n  const onElementEnabled = evt => {\n    setElement(evt.detail.element);\n  };\n\n  function switchMeasurement(direction) {\n    const newTrackedMeasurementUID = _getNextMeasurementUID(\n      direction,\n      servicesManager,\n      trackedMeasurementUID,\n      trackedMeasurements\n    );\n\n    if (!newTrackedMeasurementUID) {\n      return;\n    }\n\n    setTrackedMeasurementUID(newTrackedMeasurementUID);\n\n    MeasurementService.jumpToMeasurement(\n      viewportIndex,\n      newTrackedMeasurementUID\n    );\n  }\n\n  const getCornerstoneViewport = () => {\n    const { component: Component } = extensionManager.getModuleEntry(\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\n    );\n\n    return <Component {...props} onElementEnabled={onElementEnabled} />;\n  };\n\n  const cine = cines[viewportIndex];\n  const isPlaying = (cine && cine.isPlaying) || false;\n\n  return (\n    <>\n      <ViewportActionBar\n        onDoubleClick={evt => {\n          evt.stopPropagation();\n          evt.preventDefault();\n        }}\n        useAltStyling={isTracked}\n        onArrowsClick={direction => switchMeasurement(direction)}\n        getStatusComponent={() => _getStatusComponent(isTracked)}\n        studyData={{\n          label: viewportLabel,\n          studyDate: formatDate(SeriesDate), // TODO: This is series date. Is that ok?\n          currentSeries: SeriesNumber, // TODO - switch entire currentSeries to be UID based or actual position based\n          seriesDescription: SeriesDescription,\n          patientInformation: {\n            patientName: PatientName\n              ? OHIF.utils.formatPN(PatientName.Alphabetic)\n              : '',\n            patientSex: PatientSex || '',\n            patientAge: PatientAge || '',\n            MRN: PatientID || '',\n            thickness: SliceThickness\n              ? `${parseFloat(SliceThickness).toFixed(2)}mm`\n              : '',\n            spacing:\n              SpacingBetweenSlices !== undefined\n                ? `${parseFloat(SpacingBetweenSlices).toFixed(2)}mm`\n                : '',\n            scanner: ManufacturerModelName || '',\n          },\n        }}\n        showNavArrows={!isCineEnabled}\n        showCine={isCineEnabled}\n        cineProps={{\n          isPlaying,\n          onClose: () => commandsManager.runCommand('toggleCine'),\n          onPlayPauseChange: isPlaying =>\n            cineService.setCine({\n              id: activeViewportIndex,\n              isPlaying,\n            }),\n          onFrameRateChange: frameRate =>\n            cineService.setCine({\n              id: activeViewportIndex,\n              frameRate,\n            }),\n        }}\n      />\n      {/* TODO: Viewport interface to accept stack or layers of content like this? */}\n      <div className=\"relative flex flex-row w-full h-full overflow-hidden\">\n        {getCornerstoneViewport()}\n        <div className=\"absolute w-full\">\n          {viewportDialogState.viewportIndex === viewportIndex && (\n            <Notification\n              id={viewportDialogState.id}\n              message={viewportDialogState.message}\n              type={viewportDialogState.type}\n              actions={viewportDialogState.actions}\n              onSubmit={viewportDialogState.onSubmit}\n              onOutsideClick={viewportDialogState.onOutsideClick}\n            />\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n\nTrackedCornerstoneViewport.propTypes = {\n  displaySets: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n  viewportIndex: PropTypes.number.isRequired,\n  dataSource: PropTypes.object,\n  children: PropTypes.node,\n  customProps: PropTypes.object,\n};\n\nTrackedCornerstoneViewport.defaultProps = {\n  customProps: {},\n};\n\nfunction _getNextMeasurementUID(\n  direction,\n  servicesManager,\n  trackedMeasurementId,\n  trackedMeasurements\n) {\n  const { MeasurementService } = servicesManager.services;\n  const measurements = MeasurementService.getMeasurements();\n\n  const { trackedSeries } = trackedMeasurements.context;\n\n  // Get the potentially trackable measurements for this series,\n  // The measurements to jump between are the same\n  // regardless if this series is tracked or not.\n\n  const filteredMeasurements = measurements.filter(m =>\n    trackedSeries.includes(m.referenceSeriesUID)\n  );\n\n  if (!filteredMeasurements.length) {\n    // No measurements on this series.\n    return;\n  }\n\n  const measurementCount = filteredMeasurements.length;\n\n  const uids = filteredMeasurements.map(fm => fm.uid);\n  let measurementIndex = uids.findIndex(uid => uid === trackedMeasurementId);\n\n  if (measurementIndex === -1) {\n    // Not tracking a measurement, or previous measurement now deleted, revert to 0.\n    measurementIndex = 0;\n  } else {\n    if (direction === 'left') {\n      measurementIndex--;\n\n      if (measurementIndex < 0) {\n        measurementIndex = measurementCount - 1;\n      }\n    } else if (direction === 'right') {\n      measurementIndex++;\n\n      if (measurementIndex === measurementCount) {\n        measurementIndex = 0;\n      }\n    }\n  }\n\n  const newTrackedMeasurementId = uids[measurementIndex];\n\n  return newTrackedMeasurementId;\n}\n\nfunction _getStatusComponent(isTracked) {\n  const trackedIcon = isTracked ? 'tracked' : 'dotted-circle';\n\n  return (\n    <div className=\"relative\">\n      <Tooltip\n        position=\"bottom-left\"\n        content={\n          <div className=\"flex py-2\">\n            <div className=\"flex pt-1\">\n              <Icon name=\"info-link\" className=\"w-4 text-primary-main\" />\n            </div>\n            <div className=\"flex ml-4\">\n              <span className=\"text-base text-common-light\">\n                {isTracked ? (\n                  <>\n                    Series is\n                    <span className=\"font-bold text-white\"> tracked</span> and\n                    can be viewed <br /> in the measurement panel\n                  </>\n                ) : (\n                  <>\n                    Measurements for\n                    <span className=\"font-bold text-white\"> untracked </span>\n                    series <br /> will not be shown in the <br /> measurements\n                    panel\n                  </>\n                )}\n              </span>\n            </div>\n          </div>\n        }\n      >\n        <Icon name={trackedIcon} className=\"w-6 text-primary-light\" />\n      </Tooltip>\n    </div>\n  );\n}\n\nexport default TrackedCornerstoneViewport;\n"],"names":["formatDate","utils","TrackedCornerstoneViewport","props","children","displaySets","viewportIndex","viewportLabel","servicesManager","extensionManager","commandsManager","useTranslation","t","services","MeasurementService","CornerstoneViewportService","displaySet","trackedMeasurements","useTrackedMeasurements","activeViewportIndex","useViewportGrid","useCine","isCineEnabled","cines","cineService","viewportDialogState","useViewportDialog","useState","isTracked","setIsTracked","trackedMeasurementUID","setTrackedMeasurementUID","element","setElement","trackedSeries","context","viewportId","getViewportId","SeriesDate","Modality","SeriesDescription","SeriesInstanceUID","SeriesNumber","images","PatientID","PatientName","PatientSex","PatientAge","SliceThickness","SpacingBetweenSlices","ManufacturerModelName","cineHandler","cine","isPlaying","frameRate","validFrameRate","Math","max","playClip","framesPerSecond","stopClip","useEffect","annotation","global","lineDash","getRenderingEngine","renderViewport","eventTarget","Enums","setCine","id","includes","onElementEnabled","evt","detail","Component","onDoubleClick","stopPropagation","preventDefault","useAltStyling","onArrowsClick","direction","newTrackedMeasurementUID","trackedMeasurementId","measurements","getMeasurements","filteredMeasurements","filter","m","referenceSeriesUID","length","measurementCount","uids","map","fm","uid","measurementIndex","findIndex","_getNextMeasurementUID","jumpToMeasurement","switchMeasurement","getStatusComponent","trackedIcon","className","position","content","name","_getStatusComponent","studyData","label","studyDate","currentSeries","seriesDescription","patientInformation","patientName","OHIF","Alphabetic","patientSex","patientAge","MRN","thickness","parseFloat","toFixed","spacing","undefined","scanner","showNavArrows","showCine","cineProps","onClose","runCommand","onPlayPauseChange","onFrameRateChange","getModuleEntry","component","message","type","actions","onSubmit","onOutsideClick","propTypes","PropTypes","isRequired","dataSource","customProps","defaultProps"],"sourceRoot":""}